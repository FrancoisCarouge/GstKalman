<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.4"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>GstKalman: /github/workspace/sample/application.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">GstKalman<span id="projectnumber">&#160;0.1.0</span>
   </div>
   <div id="projectbrief">GStreamer Kalman Filter Video Plugin in C++</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.4 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search",'Search','.xhtml');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('application_8cpp_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle"><div class="title">application.cpp</div></div>
</div><!--header-->
<div class="contents">
<a href="application_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span><span class="comment">/*  __          _      __  __          _   _</span></div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span><span class="comment">| |/ /    /\   | |    |  \/  |   /\   | \ | |</span></div>
<div class="line"><a id="l00003" name="l00003"></a><span class="lineno">    3</span><span class="comment">| &#39; /    /  \  | |    | \  / |  /  \  |  \| |</span></div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span><span class="comment">|  &lt;    / /\ \ | |    | |\/| | / /\ \ | . ` |</span></div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span><span class="comment">| . \  / ____ \| |____| |  | |/ ____ \| |\  |</span></div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span><span class="comment">|_|\_\/_/    \_\______|_|  |_/_/    \_\_| \_|</span></div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span><span class="comment"></span> </div>
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno">    8</span><span class="comment">GStreamer Kalman Filter Video Plugin in C++</span></div>
<div class="line"><a id="l00009" name="l00009"></a><span class="lineno">    9</span><span class="comment">Version 0.1.0</span></div>
<div class="line"><a id="l00010" name="l00010"></a><span class="lineno">   10</span><span class="comment">https://github.com/FrancoisCarouge/GstKalman</span></div>
<div class="line"><a id="l00011" name="l00011"></a><span class="lineno">   11</span><span class="comment"></span> </div>
<div class="line"><a id="l00012" name="l00012"></a><span class="lineno">   12</span><span class="comment">SPDX-License-Identifier: Unlicense</span></div>
<div class="line"><a id="l00013" name="l00013"></a><span class="lineno">   13</span><span class="comment"></span> </div>
<div class="line"><a id="l00014" name="l00014"></a><span class="lineno">   14</span><span class="comment">This is free and unencumbered software released into the public domain.</span></div>
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno">   15</span><span class="comment"></span> </div>
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno">   16</span><span class="comment">Anyone is free to copy, modify, publish, use, compile, sell, or</span></div>
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno">   17</span><span class="comment">distribute this software, either in source code form or as a compiled</span></div>
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno">   18</span><span class="comment">binary, for any purpose, commercial or non-commercial, and by any</span></div>
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno">   19</span><span class="comment">means.</span></div>
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno">   20</span><span class="comment"></span> </div>
<div class="line"><a id="l00021" name="l00021"></a><span class="lineno">   21</span><span class="comment">In jurisdictions that recognize copyright laws, the author or authors</span></div>
<div class="line"><a id="l00022" name="l00022"></a><span class="lineno">   22</span><span class="comment">of this software dedicate any and all copyright interest in the</span></div>
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno">   23</span><span class="comment">software to the public domain. We make this dedication for the benefit</span></div>
<div class="line"><a id="l00024" name="l00024"></a><span class="lineno">   24</span><span class="comment">of the public at large and to the detriment of our heirs and</span></div>
<div class="line"><a id="l00025" name="l00025"></a><span class="lineno">   25</span><span class="comment">successors. We intend this dedication to be an overt act of</span></div>
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno">   26</span><span class="comment">relinquishment in perpetuity of all present and future rights to this</span></div>
<div class="line"><a id="l00027" name="l00027"></a><span class="lineno">   27</span><span class="comment">software under copyright law.</span></div>
<div class="line"><a id="l00028" name="l00028"></a><span class="lineno">   28</span><span class="comment"></span> </div>
<div class="line"><a id="l00029" name="l00029"></a><span class="lineno">   29</span><span class="comment">THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND,</span></div>
<div class="line"><a id="l00030" name="l00030"></a><span class="lineno">   30</span><span class="comment">EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF</span></div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno">   31</span><span class="comment">MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.</span></div>
<div class="line"><a id="l00032" name="l00032"></a><span class="lineno">   32</span><span class="comment">IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR</span></div>
<div class="line"><a id="l00033" name="l00033"></a><span class="lineno">   33</span><span class="comment">OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,</span></div>
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno">   34</span><span class="comment">ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR</span></div>
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno">   35</span><span class="comment">OTHER DEALINGS IN THE SOFTWARE.</span></div>
<div class="line"><a id="l00036" name="l00036"></a><span class="lineno">   36</span><span class="comment"></span> </div>
<div class="line"><a id="l00037" name="l00037"></a><span class="lineno">   37</span><span class="comment">For more information, please refer to &lt;https://unlicense.org&gt; */</span></div>
<div class="line"><a id="l00038" name="l00038"></a><span class="lineno">   38</span> </div>
<div class="line"><a id="l00039" name="l00039"></a><span class="lineno">   39</span><span class="preprocessor">#include &lt;glib-object.h&gt;</span></div>
<div class="line"><a id="l00040" name="l00040"></a><span class="lineno">   40</span><span class="preprocessor">#include &lt;gst/gst.h&gt;</span></div>
<div class="line"><a id="l00041" name="l00041"></a><span class="lineno">   41</span><span class="preprocessor">#include &lt;scope.h&gt;</span></div>
<div class="line"><a id="l00042" name="l00042"></a><span class="lineno">   42</span> </div>
<div class="line"><a id="l00043" name="l00043"></a><span class="lineno">   43</span><span class="preprocessor">#include &lt;cassert&gt;</span></div>
<div class="line"><a id="l00044" name="l00044"></a><span class="lineno">   44</span><span class="preprocessor">#include &lt;string&gt;</span></div>
<div class="line"><a id="l00045" name="l00045"></a><span class="lineno">   45</span> </div>
<div class="line"><a id="l00046" name="l00046"></a><span class="lineno">   46</span><span class="keyword">namespace </span><a class="code hl_namespace" href="namespacefcarouge_1_1sample.xhtml">fcarouge::sample</a> {</div>
<div class="line"><a id="l00047" name="l00047"></a><span class="lineno"><a class="line" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02application_8cpp_03.xhtml">   47</a></span><span class="keyword">namespace </span>{</div>
<div class="line"><a id="l00048" name="l00048"></a><span class="lineno">   48</span> </div>
<div class="line"><a id="l00050" name="l00050"></a><span class="lineno">   50</span><span class="keywordtype">void</span> <a class="code hl_function" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02application_8cpp_03.xhtml#abb1e2265da72f61970789a5e43e4a59c">link_pad_callback</a>(GstElement *source, GstPad *pad, GstElement *sink);</div>
<div class="line"><a id="l00051" name="l00051"></a><span class="lineno">   51</span> </div>
<div class="line"><a id="l00053" name="l00053"></a><span class="lineno">   53</span><span class="keyword">auto</span> <a class="code hl_function" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02application_8cpp_03.xhtml#a6e4b87365fcbbbe3697ccdfa16dfa550">quit_callback</a>(<span class="keyword">auto</span> bus, <span class="keyword">auto</span> message, <span class="keyword">auto</span> loop) -&gt; gboolean;</div>
<div class="line"><a id="l00054" name="l00054"></a><span class="lineno">   54</span> </div>
<div class="line"><a id="l00056" name="l00056"></a><span class="lineno">   56</span><span class="keywordtype">void</span> <a class="code hl_function" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02application_8cpp_03.xhtml#a5558ba9a57aa74f9a6029684b70b7cbb">gst_pipeline_destroy</a>(GstElement *pipeline);</div>
<div class="line"><a id="l00057" name="l00057"></a><span class="lineno">   57</span> </div>
<div class="line"><a id="l00064" name="l00064"></a><span class="lineno"><a class="line" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02application_8cpp_03.xhtml#a9f601425e3e0128f32d14de6781387c1">   64</a></span>[[maybe_unused]] <span class="keyword">const</span> <span class="keyword">auto</span> <a class="code hl_variable" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02application_8cpp_03.xhtml#a9f601425e3e0128f32d14de6781387c1">application</a>{[] {</div>
<div class="line"><a id="l00065" name="l00065"></a><span class="lineno">   65</span>  <span class="comment">// Initialize the GStreamer library to enable framework usage, or terminate.</span></div>
<div class="line"><a id="l00066" name="l00066"></a><span class="lineno">   66</span>  gst_init(<span class="keyword">nullptr</span>, <span class="keyword">nullptr</span>);</div>
<div class="line"><a id="l00067" name="l00067"></a><span class="lineno">   67</span> </div>
<div class="line"><a id="l00068" name="l00068"></a><span class="lineno">   68</span>  <span class="comment">// Create a top-level bin media pipeline to manage media streaming.</span></div>
<div class="line"><a id="l00069" name="l00069"></a><span class="lineno">   69</span>  <span class="keyword">const</span> sr::unique_resource pipeline{gst_pipeline_new(<span class="keyword">nullptr</span>),</div>
<div class="line"><a id="l00070" name="l00070"></a><span class="lineno">   70</span>                                     <a class="code hl_function" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02application_8cpp_03.xhtml#a5558ba9a57aa74f9a6029684b70b7cbb">gst_pipeline_destroy</a>};</div>
<div class="line"><a id="l00071" name="l00071"></a><span class="lineno">   71</span>  assert(pipeline.get() &amp;&amp; <span class="stringliteral">&quot;Failed to create the pipeline.&quot;</span>);</div>
<div class="line"><a id="l00072" name="l00072"></a><span class="lineno">   72</span> </div>
<div class="line"><a id="l00073" name="l00073"></a><span class="lineno">   73</span>  <span class="comment">// Create the execution context main loop where computation takes place.</span></div>
<div class="line"><a id="l00074" name="l00074"></a><span class="lineno">   74</span>  <span class="keyword">const</span> sr::unique_resource loop{g_main_loop_new(<span class="keyword">nullptr</span>, 0),</div>
<div class="line"><a id="l00075" name="l00075"></a><span class="lineno">   75</span>                                 g_main_loop_unref};</div>
<div class="line"><a id="l00076" name="l00076"></a><span class="lineno">   76</span>  assert(loop.get() &amp;&amp; <span class="stringliteral">&quot;Failed to create the event loop.&quot;</span>);</div>
<div class="line"><a id="l00077" name="l00077"></a><span class="lineno">   77</span> </div>
<div class="line"><a id="l00078" name="l00078"></a><span class="lineno">   78</span>  <span class="comment">// Create a decoder bin element from URI to source the media.</span></div>
<div class="line"><a id="l00079" name="l00079"></a><span class="lineno">   79</span>  <span class="keyword">auto</span> *<span class="keyword">const</span> decoder{</div>
<div class="line"><a id="l00080" name="l00080"></a><span class="lineno">   80</span>      gst_element_factory_make_full(<span class="stringliteral">&quot;uridecodebin&quot;</span>, <span class="stringliteral">&quot;uri&quot;</span>,</div>
<div class="line"><a id="l00081" name="l00081"></a><span class="lineno">   81</span>                                    <span class="stringliteral">&quot;file:///home/dev/cpp/gstkalman/gstkalman/&quot;</span></div>
<div class="line"><a id="l00082" name="l00082"></a><span class="lineno">   82</span>                                    <span class="stringliteral">&quot;sample/data/roundhay_garden.mp4&quot;</span>,</div>
<div class="line"><a id="l00083" name="l00083"></a><span class="lineno">   83</span>                                    <span class="keyword">nullptr</span>)};</div>
<div class="line"><a id="l00084" name="l00084"></a><span class="lineno">   84</span>  assert(decoder &amp;&amp; <span class="stringliteral">&quot;Failed to create the decoder from URI element.&quot;</span>);</div>
<div class="line"><a id="l00085" name="l00085"></a><span class="lineno">   85</span> </div>
<div class="line"><a id="l00086" name="l00086"></a><span class="lineno">   86</span>  <span class="comment">// Create an element converting formats for compatibility.</span></div>
<div class="line"><a id="l00087" name="l00087"></a><span class="lineno">   87</span>  <span class="keyword">auto</span> *<span class="keyword">const</span> converter{gst_element_factory_make(<span class="stringliteral">&quot;videoconvert&quot;</span>, <span class="keyword">nullptr</span>)};</div>
<div class="line"><a id="l00088" name="l00088"></a><span class="lineno">   88</span>  assert(converter &amp;&amp; <span class="stringliteral">&quot;Failed to create the video conversion element.&quot;</span>);</div>
<div class="line"><a id="l00089" name="l00089"></a><span class="lineno">   89</span> </div>
<div class="line"><a id="l00090" name="l00090"></a><span class="lineno">   90</span>  <span class="comment">// Create the Kalman filter element under demonstration.</span></div>
<div class="line"><a id="l00091" name="l00091"></a><span class="lineno">   91</span>  <span class="keyword">auto</span> *<span class="keyword">const</span> <a class="code hl_typedef" href="namespaceanonymous__namespace_02gstkalman_8cpp_03.xhtml#ab51f675c361d36c316eca7e9f114250e">kalman</a>{</div>
<div class="line"><a id="l00092" name="l00092"></a><span class="lineno">   92</span>      gst_element_factory_make_full(<span class="stringliteral">&quot;kalman&quot;</span>, <span class="stringliteral">&quot;p&quot;</span>, 100., <span class="stringliteral">&quot;r&quot;</span>, 100., <span class="keyword">nullptr</span>)};</div>
<div class="line"><a id="l00093" name="l00093"></a><span class="lineno">   93</span>  assert(<a class="code hl_typedef" href="namespaceanonymous__namespace_02gstkalman_8cpp_03.xhtml#ab51f675c361d36c316eca7e9f114250e">kalman</a> &amp;&amp; <span class="stringliteral">&quot;Failed to create the kalman filter element.&quot;</span>);</div>
<div class="line"><a id="l00094" name="l00094"></a><span class="lineno">   94</span> </div>
<div class="line"><a id="l00095" name="l00095"></a><span class="lineno">   95</span>  <span class="comment">// Create an element to play the media out.</span></div>
<div class="line"><a id="l00096" name="l00096"></a><span class="lineno">   96</span>  <span class="keyword">auto</span> *<span class="keyword">const</span> sink{gst_element_factory_make(<span class="stringliteral">&quot;autovideosink&quot;</span>, <span class="keyword">nullptr</span>)};</div>
<div class="line"><a id="l00097" name="l00097"></a><span class="lineno">   97</span>  assert(sink &amp;&amp; <span class="stringliteral">&quot;Failed to create the video sink element.&quot;</span>);</div>
<div class="line"><a id="l00098" name="l00098"></a><span class="lineno">   98</span> </div>
<div class="line"><a id="l00099" name="l00099"></a><span class="lineno">   99</span>  <span class="comment">// Add each element to the bin.</span></div>
<div class="line"><a id="l00100" name="l00100"></a><span class="lineno">  100</span>  <span class="keywordflow">for</span> (<span class="keyword">auto</span> &amp;&amp;element : {decoder, converter, <a class="code hl_typedef" href="namespaceanonymous__namespace_02gstkalman_8cpp_03.xhtml#ab51f675c361d36c316eca7e9f114250e">kalman</a>, sink}) {</div>
<div class="line"><a id="l00101" name="l00101"></a><span class="lineno">  101</span>    assert(gst_bin_add(GST_BIN(pipeline.get()), element));</div>
<div class="line"><a id="l00102" name="l00102"></a><span class="lineno">  102</span>  }</div>
<div class="line"><a id="l00103" name="l00103"></a><span class="lineno">  103</span> </div>
<div class="line"><a id="l00104" name="l00104"></a><span class="lineno">  104</span>  <span class="comment">// Chain the elements of the bin together, in order.</span></div>
<div class="line"><a id="l00105" name="l00105"></a><span class="lineno">  105</span>  assert(gst_element_link_many(converter, <a class="code hl_typedef" href="namespaceanonymous__namespace_02gstkalman_8cpp_03.xhtml#ab51f675c361d36c316eca7e9f114250e">kalman</a>, sink, <span class="keyword">nullptr</span>));</div>
<div class="line"><a id="l00106" name="l00106"></a><span class="lineno">  106</span> </div>
<div class="line"><a id="l00107" name="l00107"></a><span class="lineno">  107</span>  <span class="comment">// Attach a signal callback linking the pad to sink on pad addition.</span></div>
<div class="line"><a id="l00108" name="l00108"></a><span class="lineno">  108</span>  assert(g_signal_connect(decoder, <span class="stringliteral">&quot;pad-added&quot;</span>, G_CALLBACK(<a class="code hl_function" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02application_8cpp_03.xhtml#abb1e2265da72f61970789a5e43e4a59c">link_pad_callback</a>),</div>
<div class="line"><a id="l00109" name="l00109"></a><span class="lineno">  109</span>                          converter));</div>
<div class="line"><a id="l00110" name="l00110"></a><span class="lineno">  110</span> </div>
<div class="line"><a id="l00111" name="l00111"></a><span class="lineno">  111</span>  <span class="comment">// Obtain the bus of the pipeline to instrument it.</span></div>
<div class="line"><a id="l00112" name="l00112"></a><span class="lineno">  112</span>  <span class="keyword">const</span> sr::unique_resource bus{gst_element_get_bus(pipeline.get()),</div>
<div class="line"><a id="l00113" name="l00113"></a><span class="lineno">  113</span>                                gst_object_unref};</div>
<div class="line"><a id="l00114" name="l00114"></a><span class="lineno">  114</span>  assert(bus.get() &amp;&amp; <span class="stringliteral">&quot;Failed to obtain the pipeline bus.&quot;</span>);</div>
<div class="line"><a id="l00115" name="l00115"></a><span class="lineno">  115</span> </div>
<div class="line"><a id="l00116" name="l00116"></a><span class="lineno">  116</span>  <span class="comment">// Watch the bus with a callback stopping the execution on error or media end.</span></div>
<div class="line"><a id="l00117" name="l00117"></a><span class="lineno">  117</span>  <span class="keyword">const</span> sr::unique_resource watch_id{</div>
<div class="line"><a id="l00118" name="l00118"></a><span class="lineno">  118</span>      gst_bus_add_watch(bus.get(), <a class="code hl_function" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02application_8cpp_03.xhtml#a6e4b87365fcbbbe3697ccdfa16dfa550">quit_callback</a>, loop.get()), g_source_remove};</div>
<div class="line"><a id="l00119" name="l00119"></a><span class="lineno">  119</span>  assert(watch_id.get() != 0 &amp;&amp; <span class="stringliteral">&quot;Failed to add the bus watch callback.&quot;</span>);</div>
<div class="line"><a id="l00120" name="l00120"></a><span class="lineno">  120</span> </div>
<div class="line"><a id="l00121" name="l00121"></a><span class="lineno">  121</span>  <span class="comment">// Prepare the pipeline to run.</span></div>
<div class="line"><a id="l00122" name="l00122"></a><span class="lineno">  122</span>  <span class="keyword">const</span> GstStateChangeReturn state_changed{</div>
<div class="line"><a id="l00123" name="l00123"></a><span class="lineno">  123</span>      gst_element_set_state(pipeline.get(), GST_STATE_PLAYING)};</div>
<div class="line"><a id="l00124" name="l00124"></a><span class="lineno">  124</span>  assert(state_changed != GST_STATE_CHANGE_FAILURE &amp;&amp;</div>
<div class="line"><a id="l00125" name="l00125"></a><span class="lineno">  125</span>         <span class="stringliteral">&quot;Failed to play the pipeline.&quot;</span>);</div>
<div class="line"><a id="l00126" name="l00126"></a><span class="lineno">  126</span> </div>
<div class="line"><a id="l00127" name="l00127"></a><span class="lineno">  127</span>  <span class="comment">// Run! The loop will return on error or end of media.</span></div>
<div class="line"><a id="l00128" name="l00128"></a><span class="lineno">  128</span>  g_main_loop_run(loop.get());</div>
<div class="line"><a id="l00129" name="l00129"></a><span class="lineno">  129</span> </div>
<div class="line"><a id="l00130" name="l00130"></a><span class="lineno">  130</span>  <span class="keywordflow">return</span> 0;</div>
<div class="line"><a id="l00131" name="l00131"></a><span class="lineno">  131</span>}()};</div>
<div class="line"><a id="l00132" name="l00132"></a><span class="lineno">  132</span> </div>
<div class="line"><a id="l00133" name="l00133"></a><span class="lineno"><a class="line" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02application_8cpp_03.xhtml#abb1e2265da72f61970789a5e43e4a59c">  133</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02application_8cpp_03.xhtml#abb1e2265da72f61970789a5e43e4a59c">link_pad_callback</a>(GstElement *source, GstPad *pad, GstElement *sink) {</div>
<div class="line"><a id="l00134" name="l00134"></a><span class="lineno">  134</span>  <span class="keyword">static_cast&lt;</span><span class="keywordtype">void</span><span class="keyword">&gt;</span>(source);</div>
<div class="line"><a id="l00135" name="l00135"></a><span class="lineno">  135</span> </div>
<div class="line"><a id="l00136" name="l00136"></a><span class="lineno">  136</span>  <span class="comment">// Obtain the media capabilities of the pad.</span></div>
<div class="line"><a id="l00137" name="l00137"></a><span class="lineno">  137</span>  <span class="keyword">const</span> sr::unique_resource pad_capabilities{gst_pad_get_current_caps(pad),</div>
<div class="line"><a id="l00138" name="l00138"></a><span class="lineno">  138</span>                                             gst_caps_unref};</div>
<div class="line"><a id="l00139" name="l00139"></a><span class="lineno">  139</span>  assert(pad_capabilities.get() &amp;&amp; <span class="stringliteral">&quot;Failed to obtain the pad&#39;s capabilities.&quot;</span>);</div>
<div class="line"><a id="l00140" name="l00140"></a><span class="lineno">  140</span> </div>
<div class="line"><a id="l00141" name="l00141"></a><span class="lineno">  141</span>  <span class="comment">// Obtain the capabilities data.</span></div>
<div class="line"><a id="l00142" name="l00142"></a><span class="lineno">  142</span>  <span class="keyword">const</span> <span class="keyword">auto</span> *capabilities_data{</div>
<div class="line"><a id="l00143" name="l00143"></a><span class="lineno">  143</span>      gst_caps_get_structure(pad_capabilities.get(), 0)};</div>
<div class="line"><a id="l00144" name="l00144"></a><span class="lineno">  144</span>  assert(capabilities_data &amp;&amp; <span class="stringliteral">&quot;Failed to obtain the pad&#39;s capabilities data.&quot;</span>);</div>
<div class="line"><a id="l00145" name="l00145"></a><span class="lineno">  145</span> </div>
<div class="line"><a id="l00146" name="l00146"></a><span class="lineno">  146</span>  <span class="comment">// View the name of the capabilities.</span></div>
<div class="line"><a id="l00147" name="l00147"></a><span class="lineno">  147</span>  <span class="keyword">const</span> std::string_view capabilities_name{</div>
<div class="line"><a id="l00148" name="l00148"></a><span class="lineno">  148</span>      gst_structure_get_name(capabilities_data)};</div>
<div class="line"><a id="l00149" name="l00149"></a><span class="lineno">  149</span>  assert(!capabilities_name.empty() &amp;&amp; <span class="stringliteral">&quot;Failed to obtain the pad&#39;s type.&quot;</span>);</div>
<div class="line"><a id="l00150" name="l00150"></a><span class="lineno">  150</span> </div>
<div class="line"><a id="l00151" name="l00151"></a><span class="lineno">  151</span>  <span class="comment">// Ignore all pads but the one offering raw video support.</span></div>
<div class="line"><a id="l00152" name="l00152"></a><span class="lineno">  152</span>  <span class="keywordflow">if</span> (!capabilities_name.starts_with(<span class="stringliteral">&quot;video/x-raw&quot;</span>)) {</div>
<div class="line"><a id="l00153" name="l00153"></a><span class="lineno">  153</span>    <span class="keywordflow">return</span>;</div>
<div class="line"><a id="l00154" name="l00154"></a><span class="lineno">  154</span>  }</div>
<div class="line"><a id="l00155" name="l00155"></a><span class="lineno">  155</span> </div>
<div class="line"><a id="l00156" name="l00156"></a><span class="lineno">  156</span>  <span class="comment">// Obtain the existing pad of the sink element.</span></div>
<div class="line"><a id="l00157" name="l00157"></a><span class="lineno">  157</span>  <span class="keyword">const</span> sr::unique_resource sink_pad{gst_element_get_static_pad(sink, <span class="stringliteral">&quot;sink&quot;</span>),</div>
<div class="line"><a id="l00158" name="l00158"></a><span class="lineno">  158</span>                                     gst_object_unref};</div>
<div class="line"><a id="l00159" name="l00159"></a><span class="lineno">  159</span>  assert(sink_pad.get() &amp;&amp; <span class="stringliteral">&quot;Failed to obtain the sink pad.&quot;</span>);</div>
<div class="line"><a id="l00160" name="l00160"></a><span class="lineno">  160</span> </div>
<div class="line"><a id="l00161" name="l00161"></a><span class="lineno">  161</span>  <span class="comment">// Link the source and sink pads together.</span></div>
<div class="line"><a id="l00162" name="l00162"></a><span class="lineno">  162</span>  <span class="keyword">const</span> GstPadLinkReturn link_status{gst_pad_link(pad, sink_pad.get())};</div>
<div class="line"><a id="l00163" name="l00163"></a><span class="lineno">  163</span>  assert(link_status == GST_PAD_LINK_OK &amp;&amp; <span class="stringliteral">&quot;Failed to link the sink pad.&quot;</span>);</div>
<div class="line"><a id="l00164" name="l00164"></a><span class="lineno">  164</span>}</div>
<div class="line"><a id="l00165" name="l00165"></a><span class="lineno">  165</span> </div>
<div class="line"><a id="l00166" name="l00166"></a><span class="lineno"><a class="line" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02application_8cpp_03.xhtml#a6e4b87365fcbbbe3697ccdfa16dfa550">  166</a></span><span class="keyword">auto</span> <a class="code hl_function" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02application_8cpp_03.xhtml#a6e4b87365fcbbbe3697ccdfa16dfa550">quit_callback</a>(<span class="keyword">auto</span> bus, <span class="keyword">auto</span> message, <span class="keyword">auto</span> loop) -&gt; gboolean {</div>
<div class="line"><a id="l00167" name="l00167"></a><span class="lineno">  167</span>  <span class="keyword">static_cast&lt;</span><span class="keywordtype">void</span><span class="keyword">&gt;</span>(bus);</div>
<div class="line"><a id="l00168" name="l00168"></a><span class="lineno">  168</span> </div>
<div class="line"><a id="l00169" name="l00169"></a><span class="lineno">  169</span>  <span class="comment">// Stop the execution context if the media ended or errored.</span></div>
<div class="line"><a id="l00170" name="l00170"></a><span class="lineno">  170</span>  <span class="keywordflow">if</span> (<span class="keyword">const</span> GstMessageType message_type{GST_MESSAGE_TYPE(message)};</div>
<div class="line"><a id="l00171" name="l00171"></a><span class="lineno">  171</span>      message_type == GST_MESSAGE_EOS || message_type == GST_MESSAGE_ERROR) {</div>
<div class="line"><a id="l00172" name="l00172"></a><span class="lineno">  172</span>    g_main_loop_quit(<span class="keyword">static_cast&lt;</span>GMainLoop *<span class="keyword">&gt;</span>(loop));</div>
<div class="line"><a id="l00173" name="l00173"></a><span class="lineno">  173</span>  }</div>
<div class="line"><a id="l00174" name="l00174"></a><span class="lineno">  174</span> </div>
<div class="line"><a id="l00175" name="l00175"></a><span class="lineno">  175</span>  <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a id="l00176" name="l00176"></a><span class="lineno">  176</span>}</div>
<div class="line"><a id="l00177" name="l00177"></a><span class="lineno">  177</span> </div>
<div class="line"><a id="l00178" name="l00178"></a><span class="lineno"><a class="line" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02application_8cpp_03.xhtml#a5558ba9a57aa74f9a6029684b70b7cbb">  178</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02application_8cpp_03.xhtml#a5558ba9a57aa74f9a6029684b70b7cbb">gst_pipeline_destroy</a>(GstElement *pipeline) {</div>
<div class="line"><a id="l00179" name="l00179"></a><span class="lineno">  179</span>  <span class="comment">// Clean stop the pipeline before destrution.</span></div>
<div class="line"><a id="l00180" name="l00180"></a><span class="lineno">  180</span>  <span class="keyword">const</span> GstStateChangeReturn state_changed{</div>
<div class="line"><a id="l00181" name="l00181"></a><span class="lineno">  181</span>      gst_element_set_state(pipeline, GST_STATE_NULL)};</div>
<div class="line"><a id="l00182" name="l00182"></a><span class="lineno">  182</span>  assert(state_changed != GST_STATE_CHANGE_FAILURE &amp;&amp;</div>
<div class="line"><a id="l00183" name="l00183"></a><span class="lineno">  183</span>         <span class="stringliteral">&quot;Failed to clear the pipeline.&quot;</span>);</div>
<div class="line"><a id="l00184" name="l00184"></a><span class="lineno">  184</span>  gst_object_unref(pipeline);</div>
<div class="line"><a id="l00185" name="l00185"></a><span class="lineno">  185</span>};</div>
<div class="line"><a id="l00186" name="l00186"></a><span class="lineno">  186</span> </div>
<div class="line"><a id="l00187" name="l00187"></a><span class="lineno">  187</span>} <span class="comment">// namespace</span></div>
<div class="line"><a id="l00188" name="l00188"></a><span class="lineno">  188</span>} <span class="comment">// namespace fcarouge::sample</span></div>
<div class="ttc" id="anamespaceanonymous__namespace_02gstkalman_8cpp_03_xhtml_ab51f675c361d36c316eca7e9f114250e"><div class="ttname"><a href="namespaceanonymous__namespace_02gstkalman_8cpp_03.xhtml#ab51f675c361d36c316eca7e9f114250e">anonymous_namespace{gstkalman.cpp}::kalman</a></div><div class="ttdeci">fcarouge::kalman&lt; float, float &gt; kalman</div><div class="ttdef"><b>Definition:</b> <a href="gstkalman_8cpp_source.xhtml#l00058">gstkalman.cpp:58</a></div></div>
<div class="ttc" id="anamespacefcarouge_1_1sample_1_1anonymous__namespace_02application_8cpp_03_xhtml_a5558ba9a57aa74f9a6029684b70b7cbb"><div class="ttname"><a href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02application_8cpp_03.xhtml#a5558ba9a57aa74f9a6029684b70b7cbb">fcarouge::sample::anonymous_namespace{application.cpp}::gst_pipeline_destroy</a></div><div class="ttdeci">void gst_pipeline_destroy(GstElement *pipeline)</div><div class="ttdoc">Pipeline cleanup scope deleter.</div><div class="ttdef"><b>Definition:</b> <a href="application_8cpp_source.xhtml#l00178">application.cpp:178</a></div></div>
<div class="ttc" id="anamespacefcarouge_1_1sample_1_1anonymous__namespace_02application_8cpp_03_xhtml_a6e4b87365fcbbbe3697ccdfa16dfa550"><div class="ttname"><a href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02application_8cpp_03.xhtml#a6e4b87365fcbbbe3697ccdfa16dfa550">fcarouge::sample::anonymous_namespace{application.cpp}::quit_callback</a></div><div class="ttdeci">auto quit_callback(auto bus, auto message, auto loop) -&gt; gboolean</div><div class="ttdoc">Bus watch callback to quit execution context on media stop.</div><div class="ttdef"><b>Definition:</b> <a href="application_8cpp_source.xhtml#l00166">application.cpp:166</a></div></div>
<div class="ttc" id="anamespacefcarouge_1_1sample_1_1anonymous__namespace_02application_8cpp_03_xhtml_a9f601425e3e0128f32d14de6781387c1"><div class="ttname"><a href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02application_8cpp_03.xhtml#a9f601425e3e0128f32d14de6781387c1">fcarouge::sample::anonymous_namespace{application.cpp}::application</a></div><div class="ttdeci">const auto application</div><div class="ttdoc">Application example demonstrating usage of the Kalman element.</div><div class="ttdef"><b>Definition:</b> <a href="application_8cpp_source.xhtml#l00064">application.cpp:64</a></div></div>
<div class="ttc" id="anamespacefcarouge_1_1sample_1_1anonymous__namespace_02application_8cpp_03_xhtml_abb1e2265da72f61970789a5e43e4a59c"><div class="ttname"><a href="namespacefcarouge_1_1sample_1_1anonymous__namespace_02application_8cpp_03.xhtml#abb1e2265da72f61970789a5e43e4a59c">fcarouge::sample::anonymous_namespace{application.cpp}::link_pad_callback</a></div><div class="ttdeci">void link_pad_callback(GstElement *source, GstPad *pad, GstElement *sink)</div><div class="ttdoc">Signal callback to link raw video pad to sink.</div><div class="ttdef"><b>Definition:</b> <a href="application_8cpp_source.xhtml#l00133">application.cpp:133</a></div></div>
<div class="ttc" id="anamespacefcarouge_1_1sample_xhtml"><div class="ttname"><a href="namespacefcarouge_1_1sample.xhtml">fcarouge::sample</a></div><div class="ttdoc">Examples, tutorials, demonstrators of the library.</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_c29eeb5af533606caea8a09e66794740.xhtml">sample</a></li><li class="navelem"><a class="el" href="application_8cpp.xhtml">application.cpp</a></li>
    <li class="footer">Generated on Sat Jan 7 2023 01:37:51 for GstKalman by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.4 </li>
  </ul>
</div>
</body>
</html>
